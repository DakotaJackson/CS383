#Most classes/files will have three targets
#target1 ClassName.o -> compile the class
#target2 test/UnitTestName.exe -> compile the unit test program and any test stubs
#target3 ABREVIATEIONtest -> run the unit test
#
#there are a few special targets: 
#	test which runs all tests  
#	clean which deletes any compiled code
#	docs which generates documentation using doxygen
#	buildTest - build all the tests but don't run so make test runs
#		all tests consecutively without compiling inbetween
#	INITIALStest - a target that runs all of a given individual's tests so not everybody is
#		is trying to update the same line in the makefile
#	INITIALSbuildTest - a target that builds all of an individual's test 

#make format
#targetName (e.g what you are creating): preqrequisites/requried files
#(tab)	command1
#(tab)	command2

#TODO
#setup usage of simlib
#setup usage of qt

LIBS = -lm
CPP=g++
CPPFLAGS = -g -Wall

.PHONY: clean docs test SFBuildTest SFallTest BGbuildTest BGallTest DJbuildTest DJallTest JJbuildTest JJallTest JPbuildTest JPallTest

#Samantha
SFBuildTest: 
SFallTest: 

#Brandon
BGbuildTest: 
BGallTest:

#Dakota 
DJbuildTest: 
DJallTest: 

#Joe
JJbuildTest: 
JJallTest: 

#Lane
JPLane.o: src/james/JPLane.cpp inc/JPConstants.h
	$(CPP) $(CPPFLAGS) -c src/james/SFCar.cpp #get rid of this when the real car is here
	$(CPP) $(CPPFLAGS) -c src/james/JPLane.cpp

test/JPLane_test.exe: JPLane.o  test/JPLane_test.cpp
	$(CPP) $(CPPFLAGS) JPLane.o test/JPLane_test.cpp  $(LIBS) -o test/JPLane_test
	
JPLtest: test/JPLane_test.exe
	test/JPLane_test.exe

#Simulation Engine
JPSimulationEngine.o: src/james/JPSimulationEngine.cpp inc/jpconstants.h inc/JPTrafficModel.h JPTrafficModel.o
	$(CPP) $(CPPFLAGS) -c src/james/JPSimulationEngine.cpp

test/JPSimulationEngine_test.exe: JPSimulationEngine.o JPTrafficModel.o test/JPSimulationEngine_test.cpp
	$(CPP) $(CPPFLAGS) JPTrafficModel.o JPSimulationEngine.o test/JPSimulationEngine_test.cpp  $(LIBS) -o test/JPSimulationEngine_test
	
JPSEtest: test/JPSimulationEngine_test.exe
	test/JPSimulationEngine_test.exe


#Traffic Model
JPTrafficModel.o: src/james/JPTrafficModel.cpp inc/jpconstants.h inc/JPTrafficModel.h 
	$(CPP) $(CPPFLAGS) -c src/james/JPTrafficModel.cpp 

test/JPTrafficModel_test.exe: JPTrafficModel.o test/JPTrafficModel_test.cpp
	$(CPP) $(CPPFLAGS) JPTrafficModel.o test/JPTrafficModel_test.cpp  $(LIBS) -o test/JPTrafficModel_test
	
JPTMtest: test/JPTrafficModel_test.exe
	test/JPTrafficModel_test.exe

#JPConstants
test/JPConstants_test.exe: test/JPConstants_test.cpp inc/jpconstants.h
	$(CPP) $(CPPFLAGS) test/JPConstants_test.cpp $(LIBS) -o test/JPConstants_test
	
JPCtest: test/JPConstants_test.exe
	test/JPConstants_test.exe

JPbuildTest: test/JPConstants_test.exe test/JPTrafficModel_test.exe
JPallTest: JPTMtest JPSEtest JPCtest

buildTest: JPbuildTest BGbuildTest DJbuildTest SFbuildTest JJbuildTest
test: JPallTest BGallTest DJallTest SFallTest JJallTest
 	
clean:
	rm -f *.o
	rm -f *.exe
	rm -f test/*.exe

docs:
	#clean out existing documentation
	rm -rf docs/html
	rm -rf docs/latex
	doxygen docs/dxy.cfg 
	#remove temporary files generated by later versions of doxygen
	rm docs/*.tmp
